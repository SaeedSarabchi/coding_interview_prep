2 separate queues for dogs and cats, and for Dequeue_any, we can just use a timestamp and dequeue the older one.

import time


class Animal:
    def __init__(self, type, name):
        self.name = name
        self.time_stamp = None
        self.type = type

    def __str__(self):
        return '{}-{}-{}'.format(self.name, self.type, self.time_stamp)

class AnimalShelter:
    def __init__(self):
        self.dog_queue = Queue()
        self.cat_queue = Queue()

    def enqueue(self, animal):
        animal.time_stamp = time.time()
        if animal.type == "dog":
            self.dog_queue.enqueue(animal)
        if animal.type == "cat":
            self.cat_queue.enqueue(animal)

    def dequeue_any(self):
        if self.dog_queue.peek() < self.cat_queue.peek():
            return self.dog_queue.dequeue()
        else:
            return self.cat_queue.dequeue()

    def dequeue_dog(self):
        return self.dog_queue.dequeue()

    def dequeue_cat(self):
        return self.cat_queue.dequeue()

animal_shelter = AnimalShelter()
animal_1 = Animal("dog", "dog1")
animal_2 = Animal("dog", "dog2")
animal_3 = Animal("cat", "cat1")
animal_4 = Animal("cat", "cat2")
animal_shelter.enqueue(animal_1)
animal_shelter.enqueue(animal_2)
animal_shelter.enqueue(animal_3)
animal_shelter.enqueue(animal_4)
animal_shelter.dequeue_dog()
animal_shelter.dequeue_cat()
animal_shelter.dequeue_any()
animal_shelter.dequeue_any()


