time complexity: O(N)

with 2 pointers:
the first pointer counts the number of elements in the liniked list
the second pointer should traverse the linkedlist untill count - k

def return_k-th(input_linkedlist, k):
    couter_ptr = input_linkedlist._head
    node_ptr = input_linkedlist._head
    element_count = 0 1
    while counter_ptr is not None:
        element_count += 1
        counter_ptr = counter_ptr.next
    if k>element_count:
        raise IndexError
    for i in range(element_count - k-1):
        node_ptr = node_ptr.next
    return node_ptr.data.key


> init_list = [(3, "val3"), (2, "val2"), (2, "val2"), (3, "val3")]
lili = LinkedList.from_list(init_list)
return_k-th(lili, 2)

> init_list = []
lili = LinkedList.from_list(init_list)
return_k-th(lili, 2)

> init_list = [(1,"val1")]
lili = LinkedList.from_list(init_list)
return_k-th(lili, 1)



