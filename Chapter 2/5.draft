XXX in questions when there is number representation involved, your first question as an interviewee should be that:
"what is the range of the numbers?"

compute the size of each linkedlist with one passs, and compute the value of the represented number.
then sum them up

-> this method is not so efficient, because, first, assuming that the primitive types do not overflow, evaluating the values of the numbers requires the power() function, which is optimally O(n), hence
   it would take O(N*log(N)) to evaluate all numbers.

def sum_lists(linkedlist1, linkedlist2):
    size_1 = 0
    ptr1 = linkedlist1._head
    while ptr1 is not None:
        size_1 += 1
        ptr1 = prt1.next

    value1 = 0


    size_2 = 0
    ptr2 = linkedlist2._head
    while ptr2 is not None:
        size_2 += 1
        ptr2 = ptr2.next


Assuming that the range of the numbers represented by the linkedlists are unbounded:

Time complexity: O(N)
space complexity: O(N) -> for the third linkedlist.

def sum_lists(list1, list2):
    list3 = LinkedList()
    ptr1 = list1._head
    ptr2 = list2._head()
    carry_over = 0
    while ptr1 is not None or ptr2 is not None:
        num1 = 0
        num2 = 0
        if ptr1 is not None:
            num1 = ptr1.data.key
            ptr1 = ptr1.next
        if ptr2 is not None:
            ptr2 = ptr2.next
        digit = (num1 + num2 + carry_over) % 10
        carry_over = (num1 + num2 + carry_over) // 10
        new_node = Node(KeyVaue(digit,str(digit)))
        list3.add_node(new_node)
    if carry_over == 1:
        new_node = Node(KeyVaue(1,str(1)))
        list3.add_node(new_node)
    return list3


init_list = [(4, "4"), (9, "9"), (2, "2"), (3, "3")]
list1 = LinkedList.from_list(init_list)
init_list = [(9, "9"), (5, "5"), (3, "3"), (9, "9")]
list2 = LinkedList.from_list(init_list)
res = sums_lists(list1, list2)
print(res.to_list_forward())

